"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Utils_1 = require("../Utils");
const events_1 = require("events");
const Arithmetic_1 = require("../arithmetic/Arithmetic");
const SharedCustomPackage_1 = require("./SharedCustomPackage");
const BundleRunner_1 = require("./BundleRunner");
const chokidar = require("chokidar");
const realm_utils_1 = require("realm-utils");
class BundleProducer {
    constructor(fuse) {
        this.fuse = fuse;
        this.bundles = new Map();
        this.hmrInjected = false;
        this.sharedEvents = new events_1.EventEmitter();
        this.runner = new BundleRunner_1.BundleRunner(this.fuse);
    }
    run(opts) {
        this.watch();
        return this.runner.run(opts).then(() => {
            this.sharedEvents.emit("producer-done");
            this.bundles.forEach(bundle => {
                bundle.context.plugins.forEach(plugin => {
                    if (realm_utils_1.utils.isFunction(plugin.producerEnd)) {
                        plugin.producerEnd(this);
                    }
                });
            });
            return this;
        });
    }
    register(packageName, opts) {
        let instructions = opts.instructions;
        if (!packageName) {
            throw new Error("Package name is required");
        }
        if (!opts.homeDir) {
            throw new Error("Register requires homeDir!");
        }
        let homeDir = Utils_1.ensureUserPath(opts.homeDir);
        if (!instructions) {
            throw new Error("Register requires opts.instructions!");
        }
        let parser = Arithmetic_1.Arithmetic.parse(instructions);
        if (!this.sharedCustomPackages) {
            this.sharedCustomPackages = new Map();
        }
        return Arithmetic_1.Arithmetic.getFiles(parser, false, homeDir).then((data) => {
            let pkg = new SharedCustomPackage_1.SharedCustomPackage(packageName, data);
            pkg.init(homeDir, opts.main || "index.js");
            this.sharedCustomPackages.set(packageName, pkg);
        });
    }
    isShared(name) {
        return this.sharedCustomPackages && this.sharedCustomPackages.get(name);
    }
    getSharedPackage(name) {
        return this.sharedCustomPackages.get(name);
    }
    add(name, bundle) {
        this.bundles.set(name, bundle);
        this.runner.bundle(bundle);
    }
    watch() {
        let settings = new Map();
        let isRequired = false;
        this.bundles.forEach(bundle => {
            if (bundle.watchRule) {
                isRequired = true;
                settings.set(bundle.name, Utils_1.string2RegExp(bundle.watchRule));
            }
        });
        if (!isRequired) {
            return;
        }
        let ready = false;
        chokidar.watch(this.fuse.context.homeDir)
            .on('all', (event, fp) => {
            if (ready) {
                this.onChanges(settings, fp);
            }
        }).on('ready', () => {
            ready = true;
        });
    }
    onChanges(settings, path) {
        path = Utils_1.ensureFuseBoxPath(path);
        settings.forEach((expression, bundleName) => {
            if (expression.test(path)) {
                const bundle = this.bundles.get(bundleName);
                const defer = bundle.fuse.context.defer;
                bundle.lastChangedFile = path;
                defer.queue(bundleName, () => {
                    return bundle.exec().then(result => {
                        this.sharedEvents.emit("file-changed", [bundle, path]);
                        return result;
                    });
                });
            }
        });
    }
}
exports.BundleProducer = BundleProducer;
